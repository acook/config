
# lots from http://www.mindfuzz.net/?p=178
# check out: http://www.linuxized.com/2010/05/switching-from-gnu-screen-to-tmux/
# https://wiki.archlinux.org/index.php/Tmux
# http://www.dayid.org/os/notes/tm.html

# Tell tmux to default to looking pretty
set -g default-terminal "screen-256color"
set-option -ga terminal-overrides ",$TERM:Tc"

# And give us some serious scrollback capabilities
set -g history-limit 1000

# enable auto renaming
setw -g automatic-rename on

# Start at 1 instead of 0, I always forget the 0 window
set  -g base-index 1
setw -g pane-base-index 1

# will change user@host as you connect to different hosts (via ssh)
set -g set-titles on
set -g set-titles-string "#T"

# We don't need any ctrl-a escape sequences, so don't delay for them
set -s escape-time 0

# Only constrain to smallest size of multiple viewers if they're looking at the same window
#setw -g aggressive-resize on
# DISABLED: because it doesn't work with iterm2 integration
setw -g aggressive-resize off

# color/status theme
source ~/.tmux/themes/sourmein.conf

# How often to refresh the status line
#set -g status-interval 2

# Key Bindings

# use the same prefix binding as GNU screen
set -g prefix C-a

# send prefix to window by double tapping ctrl-a, should be good for SSH, and start of line
bind C-a send-prefix

# Quick reload of configs
bind r source-file ~/.tmux.conf \;\
  display 'Reloaded configuration!'

# clear screen without clearing scrollback buffer
#bind C-k send-keys 'C-l'
bind C-l send-keys 'C-l'

# clear scrollback buffer
#bind C-K clear-history

# clear screen and reset terminal state
bind C-r send-keys -R

# WINDOWS

# More intuitive bindings for screen splitting
bind | split-window -h
bind \\ split-window -h # for fat fingers
bind - split-window -v
bind _ split-window -v # for fat fingers

# flip flop most recent window
bind Tab last-window

# Cycle through windows
bind -r C-Left  select-window -t :-
bind -r C-Right select-window -t :+

# Vim-ish cycle
bind -r C-h select-window -t :-
#bind -r C-l select-window -t :+

# PANES

# flip flop most recent pane
bind ` last-pane

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# Remove delay after switching panes by removing key repeat
bind Up    select-pane -U
bind Down  select-pane -D
bind Left  select-pane -L
bind Right select-pane -R

# Vim style pane selection
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Pane resizing
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Force restart pane
bind R confirm-before -p "Kill and respawn pane? (y/n)" "respawn-pane -k"

# COPY MODE

# Use esc to get into copy mode (like screen)
bind Escape copy-mode

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection

# funnel clipboard data into system (MacOS & Linux) clipboard if available
# in the near future the OSC52 escape sequence may finally obsolete this hack
# keep an eye on https://gitlab.gnome.org/GNOME/vte/-/issues/125
bind-key -T copy-mode-vi y send -X copy-pipe "system-clipboard"\; display-message "copied to system clipboard"

# Update binding of `Enter` to also use copy-pipe
bind-key -T copy-mode-vi Enter send -X copy-pipe "system-clipboard"\; display-message "copied to system clipboard"

# BUFFERS

# quick paste from prefix mode
bind p paste-buffer
bind P choose-buffer

# put contents of system clipboard into tmux buffer
bind C-v run -b "tmux set-buffer -- \"$(system-clipboard)\""
# put contents of tmux buffer into system clipboard
bind C-c run -b "tmux show-buffer | system-clipboard"

# SHELL

# Use whatever shell we launched from
set -g default-shell $SHELL

# all of my shell commands assume bash, regardless of which shell I'm actually using
set-option -g default-command "bash"

# use with `brew install reattach-to-user-namespace`
# fixes the way OSX handles daemons
# fixes clipboard weirdness for tmux and vims running inside it
if-shell -b 'command -v reattach-to-user-namespace' \
  'set-option -g default-command "reattach-to-user-namespace -l bash"'

# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"

if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' \
  "set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on"

# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
  "set -g mouse on"

# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"

# `brew install reattach-to-user-namespace`
# fixes the way OSX handles daemons
# fixes clipboard weirdness for tmux and vims running inside it
set-option -g default-command "safe-reattach-to-user-namespace -l $SHELL"

